# -*- coding: utf-8 -*-
# @Time    : 2019/5/14 18:00
# @Author  : WHS
# @File    : text.py
# @Software: PyCharm
import math
def angle(v1, v2):
    """
    计算两个路段之间的夹角
    :param v1: 传入轨迹1的两个经纬度坐标
    :param v2: 传入轨迹2的两个经纬度坐标
    :return:  角度和余弦值
    """
    dx1 = v1[2] - v1[0]
    dy1 = v1[3] - v1[1]
    dx2 = v2[2] - v2[0]
    dy2 = v2[3] - v2[1]
    angle1 = math.atan2(dy1, dx1)
    angle1 = int(angle1 * 180/math.pi)
    # print(angle1)
    angle2 = math.atan2(dy2, dx2)
    angle2 = int(angle2 * 180/math.pi)
    # print(angle2)
    if angle1*angle2 >= 0:
        included_angle = abs(angle1-angle2)
    else:
        included_angle = abs(angle1) + abs(angle2)
        if included_angle > 180:
            included_angle = 360 - included_angle
    return included_angle,math.cos((included_angle/180)*math.pi)
B = [116.427295, 39.721135, 116.441663, 39.720951]  #原轨迹[116.427295, 39.721135, 116.441663, 39.720951]
A = [116.4296969, 39.7212719, 116.427613, 39.7213152]
print(angle(A,B))
def Select_Route_By_Normal(dic):
    """
    从候选路段中选出最终的way，由于距离和角度不在一个数量级，归一化后通过权重选出最终的way
    (x-min)/(max-min)
    :param dic: 候选路段字典如：{47574526: [[0.00011365462819997119, 34], [0.0006557570789768584, 12]]}
    :return:
    """
    weight = float("-inf")
    return_key = None
    tem_dis = dic[0][0]
    tem_angle =(math.cos((dic[0][1]/180 ) * math.pi))
    return_key = list(dic1.keys())[0]
    for key in dic.keys():
        weight_angle = (math.cos((dic[key][1]/180 ) * math.pi))
        if dic[key][0] >= tem_dis and weight_angle>= tem_angle:
            pass
        elif  dic[key][0] < tem_dis and weight_angle >= tem_angle:
            if (tem_dis/ dic[key][0]) > (weight_angle/tem_angle):   #距离比例大于角度比例
                pass
        elif dic[key][0] >= tem_dis and weight_angle < tem_angle:
            pass
        elif  dic[key][0] < tem_dis and weight_angle < tem_angle:
            return_key = key


        """
        weight_d = (1/(1+dic[key][0]))*0.5
        weight_angle = (math.cos((dic[key][1]/180 ) * math.pi))*0.5
        tem_weight =weight_d + weight_angle
        #print(weight_d,weight_angle)
        if tem_weight > weight:

            weight = tem_weight
            return_key = key
        """
    return return_key
def Select_Route_By_Distances(dic):
    """
    根据候选路段选出最终的路段，返回way_id
    :param dic:
    :return:
    """
    distance = float("inf")
    return_key = None
    for key in dic.keys():
        #tem_dis = dic[key][0][0]+dic[key][1][0]
        if dic[key][0] < distance:
            distance = dic[key][0]
            return_key = key
        else:
            pass
    return return_key

dic1 ={152616724: [0.0005929840220173656, 0], 242945771: [2.0457132034962656e-05, 6], 437527024: [0.0002974774036354907, 1], 466289457: [0.00012462611161701608, 6], 466289460: [3.665932839909215e-05, 1], 466289461: [0.0004612870644133702, 30], 606768158: [0.0011034964916158423, 75], 606768164: [0.0009561246469601322, 46], 606768165: [0.00012462611161701608, 12]}
dic2 ={47574526: [0.0019440054297010989, 162], 117082577: [0.001488739080464366, 96],
       117082581: [0.0006746497038466663, 2], 117082584: [0.001609842813555419, 129],
       117082588: [0.0009550723560463794, 67], 152616724: [0.0011241588342622965, 3],
       242945771: [0.00021710011666129056, 2], 318323104: [0.0012443680018194257, 176],
       437527024: [0.00039255687569734034, 3], 437527025: [0.000409579039245805, 107],
       466289455: [0.0018980427427333013, 160], 466289458: [0.0007821524618543111, 84],
       466289460: [0.00020497583856235295, 14], 606768160: [0.0015312553838702848, 172],
       606768161: [0.0011614728813144056, 107], 606768164: [0.00031791569056959814, 59],
       606768165: [0.0006486350515813651, 59], 606768166: [0.0001515122758041691, 31],
       606768167: [0.00039255687569734034, 10]}

#print(Select_Route_By_Normal(dic1))
#print(Select_Route_By_Normal(dic2))
#print((0.00021710011666129056/0.0001515122758041691),((math.cos((2/180 ) * math.pi)))/(math.cos((31/180 ) * math.pi)))

#FG路段交集
dic_FG = {152616724: [[0.0005929840220173656, 0], [0.0011241588342622965, 3]], 242945771: [[2.0457132034962656e-05, 6], [0.00021710011666129056, 2]], 437527024: [[0.0002974774036354907, 1], [0.00039255687569734034, 3]], 466289460: [[3.665932839909215e-05, 1], [0.00020497583856235295, 14]], 606768164: [[0.0009561246469601322, 46], [0.00031791569056959814, 59]], 606768165: [[0.00012462611161701608, 12], [0.0006486350515813651, 59]]}
dic_AB = {47574526: [[1.57938608582908e-05, 0], [0.001773821423712784, 1]], 318323104: [[8.2249881637486e-05, 0], [0.0018416255522091095, 13]]}
dic_BC = {47574526: [[2.729373278699965e-05, 35], [0.0006557570789768584, 12]], 318323104: [[0.0027101304149173234, 22], [0.0009730307658353203, 30]], 606768157: [[0.0009683059861540181, 6], [0.000772761619339776, 20]], 606768160: [[0.0012969777573333039, 25], [0.000772761619339776, 14]]}

#print(Select_Route_By_Distance(dic_AB))
#print(Select_Route_By_Distance(dic_BC))
#print(Select_Route_By_Distance(dic_FG))
#以下点为003b5b7e-e72c-4fc5-ac6d-bcc248ac7a16辆在北野场桥的点  具体见图片H:\GPS_Data\Road_Network\BYCBridge\Trunks\KML

dic2_A = {152616724: [0.0003128038715210686, 8], 242945771: [0.00010030804556522377, 13], 437527024: [0.0001363336516206252, 10], 466289457: [0.0001363336516206252, 12], 466289461: [0.0003281441853758246, 79]}
dic2_B = {117082581: [0.00062150985561782, 8], 117082588: [4.1582337084512324e-05, 78], 152616724: [1.9969436735789746e-05, 3], 242945771: [0.001020597743675472, 4], 437527024: [0.0005235278172044847, 3], 466289458: [0.0017345793776589475, 78], 466289460: [0.0007160736290237602, 8], 606768164: [0.0011411202343953512, 65], 606768165: [0.0014632538487620113, 65], 606768166: [0.0008813607997606883, 25], 606768167: [0.0005235278172044847, 4]}

print(Select_Route_By_Distances(dic2_A))
print(Select_Route_By_Distances(dic2_B))
